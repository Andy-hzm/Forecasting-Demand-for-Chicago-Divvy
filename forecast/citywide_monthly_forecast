{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Preparations"],"metadata":{"id":"SSiKAbelztc9"}},{"cell_type":"code","source":["! pip install sktime\n","! pip install pmdarima"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QDSkpiinz3Rs","executionInfo":{"status":"ok","timestamp":1745735362425,"user_tz":300,"elapsed":10879,"user":{"displayName":"Zimeng Huang","userId":"11912824630688390396"}},"outputId":"4b362b90-e426-45d6-ed0f-3d4a3054f827"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: sktime in /usr/local/lib/python3.11/dist-packages (0.37.0)\n","Requirement already satisfied: joblib<1.5,>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from sktime) (1.4.2)\n","Requirement already satisfied: numpy<2.3,>=1.21 in /usr/local/lib/python3.11/dist-packages (from sktime) (2.0.2)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from sktime) (24.2)\n","Requirement already satisfied: pandas<2.3.0,>=1.1 in /usr/local/lib/python3.11/dist-packages (from sktime) (2.2.2)\n","Requirement already satisfied: scikit-base<0.13.0,>=0.6.1 in /usr/local/lib/python3.11/dist-packages (from sktime) (0.12.2)\n","Requirement already satisfied: scikit-learn<1.7.0,>=0.24 in /usr/local/lib/python3.11/dist-packages (from sktime) (1.6.1)\n","Requirement already satisfied: scipy<2.0.0,>=1.2 in /usr/local/lib/python3.11/dist-packages (from sktime) (1.14.1)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas<2.3.0,>=1.1->sktime) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas<2.3.0,>=1.1->sktime) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas<2.3.0,>=1.1->sktime) (2025.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn<1.7.0,>=0.24->sktime) (3.6.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas<2.3.0,>=1.1->sktime) (1.17.0)\n","Requirement already satisfied: sktime[forecasting] in /usr/local/lib/python3.11/dist-packages (0.37.0)\n","Requirement already satisfied: joblib<1.5,>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from sktime[forecasting]) (1.4.2)\n","Requirement already satisfied: numpy<2.3,>=1.21 in /usr/local/lib/python3.11/dist-packages (from sktime[forecasting]) (2.0.2)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from sktime[forecasting]) (24.2)\n","Requirement already satisfied: pandas<2.3.0,>=1.1 in /usr/local/lib/python3.11/dist-packages (from sktime[forecasting]) (2.2.2)\n","Requirement already satisfied: scikit-base<0.13.0,>=0.6.1 in /usr/local/lib/python3.11/dist-packages (from sktime[forecasting]) (0.12.2)\n","Requirement already satisfied: scikit-learn<1.7.0,>=0.24 in /usr/local/lib/python3.11/dist-packages (from sktime[forecasting]) (1.6.1)\n","Requirement already satisfied: scipy<2.0.0,>=1.2 in /usr/local/lib/python3.11/dist-packages (from sktime[forecasting]) (1.14.1)\n","Collecting arch<7.1,>=5.6 (from sktime[forecasting])\n","  Downloading arch-7.0.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (13 kB)\n","Collecting autots<0.7,>=0.6.1 (from sktime[forecasting])\n","  Downloading autots-0.6.21-py3-none-any.whl.metadata (11 kB)\n","Requirement already satisfied: pmdarima!=1.8.1,<2.1,>=1.8 in /usr/local/lib/python3.11/dist-packages (from sktime[forecasting]) (2.0.4)\n","Requirement already satisfied: prophet<1.2,>=1.1 in /usr/local/lib/python3.11/dist-packages (from sktime[forecasting]) (1.1.6)\n","Collecting skforecast<0.15,>=0.12.1 (from sktime[forecasting])\n","  Downloading skforecast-0.14.0-py3-none-any.whl.metadata (16 kB)\n","Collecting skpro<2.10.0,>=2 (from sktime[forecasting])\n","  Downloading skpro-2.9.0-py3-none-any.whl.metadata (16 kB)\n","Collecting statsforecast<2.1.0,>=1.0.0 (from sktime[forecasting])\n","  Downloading statsforecast-2.0.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (29 kB)\n","Requirement already satisfied: statsmodels<0.15,>=0.12.1 in /usr/local/lib/python3.11/dist-packages (from sktime[forecasting]) (0.14.4)\n","Collecting tbats<1.2,>=1.1 (from sktime[forecasting])\n","  Downloading tbats-1.1.3-py3-none-any.whl.metadata (3.8 kB)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas<2.3.0,>=1.1->sktime[forecasting]) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas<2.3.0,>=1.1->sktime[forecasting]) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas<2.3.0,>=1.1->sktime[forecasting]) (2025.2)\n","Requirement already satisfied: Cython!=0.29.18,!=0.29.31,>=0.29 in /usr/local/lib/python3.11/dist-packages (from pmdarima!=1.8.1,<2.1,>=1.8->sktime[forecasting]) (3.0.12)\n","Requirement already satisfied: urllib3 in /usr/local/lib/python3.11/dist-packages (from pmdarima!=1.8.1,<2.1,>=1.8->sktime[forecasting]) (2.3.0)\n","Requirement already satisfied: setuptools!=50.0.0,>=38.6.0 in /usr/local/lib/python3.11/dist-packages (from pmdarima!=1.8.1,<2.1,>=1.8->sktime[forecasting]) (75.2.0)\n","Requirement already satisfied: cmdstanpy>=1.0.4 in /usr/local/lib/python3.11/dist-packages (from prophet<1.2,>=1.1->sktime[forecasting]) (1.2.5)\n","Requirement already satisfied: matplotlib>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from prophet<1.2,>=1.1->sktime[forecasting]) (3.10.0)\n","Requirement already satisfied: holidays<1,>=0.25 in /usr/local/lib/python3.11/dist-packages (from prophet<1.2,>=1.1->sktime[forecasting]) (0.71)\n","Requirement already satisfied: tqdm>=4.36.1 in /usr/local/lib/python3.11/dist-packages (from prophet<1.2,>=1.1->sktime[forecasting]) (4.67.1)\n","Requirement already satisfied: importlib-resources in /usr/local/lib/python3.11/dist-packages (from prophet<1.2,>=1.1->sktime[forecasting]) (6.5.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn<1.7.0,>=0.24->sktime[forecasting]) (3.6.0)\n","Collecting optuna>=2.10 (from skforecast<0.15,>=0.12.1->sktime[forecasting])\n","  Downloading optuna-4.3.0-py3-none-any.whl.metadata (17 kB)\n","Requirement already satisfied: numba>=0.59 in /usr/local/lib/python3.11/dist-packages (from skforecast<0.15,>=0.12.1->sktime[forecasting]) (0.60.0)\n","Requirement already satisfied: cloudpickle in /usr/local/lib/python3.11/dist-packages (from statsforecast<2.1.0,>=1.0.0->sktime[forecasting]) (3.1.1)\n","Collecting coreforecast>=0.0.12 (from statsforecast<2.1.0,>=1.0.0->sktime[forecasting])\n","  Downloading coreforecast-0.0.16-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.7 kB)\n","Collecting fugue>=0.8.1 (from statsforecast<2.1.0,>=1.0.0->sktime[forecasting])\n","  Downloading fugue-0.9.1-py3-none-any.whl.metadata (18 kB)\n","Collecting utilsforecast>=0.1.4 (from statsforecast<2.1.0,>=1.0.0->sktime[forecasting])\n","  Downloading utilsforecast-0.2.12-py3-none-any.whl.metadata (7.6 kB)\n","Requirement already satisfied: patsy>=0.5.6 in /usr/local/lib/python3.11/dist-packages (from statsmodels<0.15,>=0.12.1->sktime[forecasting]) (1.0.1)\n","Requirement already satisfied: stanio<2.0.0,>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from cmdstanpy>=1.0.4->prophet<1.2,>=1.1->sktime[forecasting]) (0.5.1)\n","Collecting triad>=0.9.7 (from fugue>=0.8.1->statsforecast<2.1.0,>=1.0.0->sktime[forecasting])\n","  Downloading triad-0.9.8-py3-none-any.whl.metadata (6.3 kB)\n","Collecting adagio>=0.2.4 (from fugue>=0.8.1->statsforecast<2.1.0,>=1.0.0->sktime[forecasting])\n","  Downloading adagio-0.2.6-py3-none-any.whl.metadata (1.8 kB)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=2.0.0->prophet<1.2,>=1.1->sktime[forecasting]) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=2.0.0->prophet<1.2,>=1.1->sktime[forecasting]) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=2.0.0->prophet<1.2,>=1.1->sktime[forecasting]) (4.57.0)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=2.0.0->prophet<1.2,>=1.1->sktime[forecasting]) (1.4.8)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=2.0.0->prophet<1.2,>=1.1->sktime[forecasting]) (11.1.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=2.0.0->prophet<1.2,>=1.1->sktime[forecasting]) (3.2.3)\n","Requirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /usr/local/lib/python3.11/dist-packages (from numba>=0.59->skforecast<0.15,>=0.12.1->sktime[forecasting]) (0.43.0)\n","Collecting alembic>=1.5.0 (from optuna>=2.10->skforecast<0.15,>=0.12.1->sktime[forecasting])\n","  Downloading alembic-1.15.2-py3-none-any.whl.metadata (7.3 kB)\n","Collecting colorlog (from optuna>=2.10->skforecast<0.15,>=0.12.1->sktime[forecasting])\n","  Downloading colorlog-6.9.0-py3-none-any.whl.metadata (10 kB)\n","Requirement already satisfied: sqlalchemy>=1.4.2 in /usr/local/lib/python3.11/dist-packages (from optuna>=2.10->skforecast<0.15,>=0.12.1->sktime[forecasting]) (2.0.40)\n","Requirement already satisfied: PyYAML in /usr/local/lib/python3.11/dist-packages (from optuna>=2.10->skforecast<0.15,>=0.12.1->sktime[forecasting]) (6.0.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas<2.3.0,>=1.1->sktime[forecasting]) (1.17.0)\n","Requirement already satisfied: Mako in /usr/lib/python3/dist-packages (from alembic>=1.5.0->optuna>=2.10->skforecast<0.15,>=0.12.1->sktime[forecasting]) (1.1.3)\n","Requirement already satisfied: typing-extensions>=4.12 in /usr/local/lib/python3.11/dist-packages (from alembic>=1.5.0->optuna>=2.10->skforecast<0.15,>=0.12.1->sktime[forecasting]) (4.13.2)\n","Requirement already satisfied: greenlet>=1 in /usr/local/lib/python3.11/dist-packages (from sqlalchemy>=1.4.2->optuna>=2.10->skforecast<0.15,>=0.12.1->sktime[forecasting]) (3.2.1)\n","Requirement already satisfied: pyarrow>=6.0.1 in /usr/local/lib/python3.11/dist-packages (from triad>=0.9.7->fugue>=0.8.1->statsforecast<2.1.0,>=1.0.0->sktime[forecasting]) (18.1.0)\n","Requirement already satisfied: fsspec>=2022.5.0 in /usr/local/lib/python3.11/dist-packages (from triad>=0.9.7->fugue>=0.8.1->statsforecast<2.1.0,>=1.0.0->sktime[forecasting]) (2025.3.2)\n","Collecting fs (from triad>=0.9.7->fugue>=0.8.1->statsforecast<2.1.0,>=1.0.0->sktime[forecasting])\n","  Downloading fs-2.4.16-py2.py3-none-any.whl.metadata (6.3 kB)\n","Collecting appdirs~=1.4.3 (from fs->triad>=0.9.7->fugue>=0.8.1->statsforecast<2.1.0,>=1.0.0->sktime[forecasting])\n","  Downloading appdirs-1.4.4-py2.py3-none-any.whl.metadata (9.0 kB)\n","Downloading arch-7.0.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (983 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m983.5/983.5 kB\u001b[0m \u001b[31m13.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading autots-0.6.21-py3-none-any.whl (974 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m974.9/974.9 kB\u001b[0m \u001b[31m40.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading skforecast-0.14.0-py3-none-any.whl (692 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m692.3/692.3 kB\u001b[0m \u001b[31m28.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading skpro-2.9.0-py3-none-any.whl (403 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m403.5/403.5 kB\u001b[0m \u001b[31m24.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading statsforecast-2.0.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (354 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m354.4/354.4 kB\u001b[0m \u001b[31m20.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading tbats-1.1.3-py3-none-any.whl (44 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.0/44.0 kB\u001b[0m \u001b[31m2.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading coreforecast-0.0.16-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (285 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m285.8/285.8 kB\u001b[0m \u001b[31m20.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading fugue-0.9.1-py3-none-any.whl (278 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m278.2/278.2 kB\u001b[0m \u001b[31m21.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading optuna-4.3.0-py3-none-any.whl (386 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m386.6/386.6 kB\u001b[0m \u001b[31m26.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading utilsforecast-0.2.12-py3-none-any.whl (42 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m42.2/42.2 kB\u001b[0m \u001b[31m2.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading adagio-0.2.6-py3-none-any.whl (19 kB)\n","Downloading alembic-1.15.2-py3-none-any.whl (231 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m231.9/231.9 kB\u001b[0m \u001b[31m18.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading triad-0.9.8-py3-none-any.whl (62 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.3/62.3 kB\u001b[0m \u001b[31m4.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading colorlog-6.9.0-py3-none-any.whl (11 kB)\n","Downloading fs-2.4.16-py2.py3-none-any.whl (135 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m135.3/135.3 kB\u001b[0m \u001b[31m8.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading appdirs-1.4.4-py2.py3-none-any.whl (9.6 kB)\n","Installing collected packages: appdirs, fs, coreforecast, colorlog, alembic, utilsforecast, triad, skpro, optuna, skforecast, autots, arch, adagio, tbats, fugue, statsforecast\n","Successfully installed adagio-0.2.6 alembic-1.15.2 appdirs-1.4.4 arch-7.0.0 autots-0.6.21 colorlog-6.9.0 coreforecast-0.0.16 fs-2.4.16 fugue-0.9.1 optuna-4.3.0 skforecast-0.14.0 skpro-2.9.0 statsforecast-2.0.1 tbats-1.1.3 triad-0.9.8 utilsforecast-0.2.12\n","Requirement already satisfied: pmdarima in /usr/local/lib/python3.11/dist-packages (2.0.4)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.11/dist-packages (from pmdarima) (1.4.2)\n","Requirement already satisfied: Cython!=0.29.18,!=0.29.31,>=0.29 in /usr/local/lib/python3.11/dist-packages (from pmdarima) (3.0.12)\n","Requirement already satisfied: numpy>=1.21.2 in /usr/local/lib/python3.11/dist-packages (from pmdarima) (2.0.2)\n","Requirement already satisfied: pandas>=0.19 in /usr/local/lib/python3.11/dist-packages (from pmdarima) (2.2.2)\n","Requirement already satisfied: scikit-learn>=0.22 in /usr/local/lib/python3.11/dist-packages (from pmdarima) (1.6.1)\n","Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.11/dist-packages (from pmdarima) (1.14.1)\n","Requirement already satisfied: statsmodels>=0.13.2 in /usr/local/lib/python3.11/dist-packages (from pmdarima) (0.14.4)\n","Requirement already satisfied: urllib3 in /usr/local/lib/python3.11/dist-packages (from pmdarima) (2.3.0)\n","Requirement already satisfied: setuptools!=50.0.0,>=38.6.0 in /usr/local/lib/python3.11/dist-packages (from pmdarima) (75.2.0)\n","Requirement already satisfied: packaging>=17.1 in /usr/local/lib/python3.11/dist-packages (from pmdarima) (24.2)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.19->pmdarima) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.19->pmdarima) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.19->pmdarima) (2025.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=0.22->pmdarima) (3.6.0)\n","Requirement already satisfied: patsy>=0.5.6 in /usr/local/lib/python3.11/dist-packages (from statsmodels>=0.13.2->pmdarima) (1.0.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas>=0.19->pmdarima) (1.17.0)\n"]}]},{"cell_type":"code","source":["# Core libraries\n","import os\n","import json\n","import warnings\n","\n","# Data manipulation\n","import pandas as pd\n","import numpy as np\n","\n","# Plotting\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import matplotlib.dates as mdates\n","\n","# Web scraping\n","import requests\n","from bs4 import BeautifulSoup\n","\n","# Google Colab integration\n","from google.colab import drive\n","\n","# Time series analysis\n","import statsmodels.api as sm\n","from statsmodels.tsa.stattools import adfuller, kpss\n","from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n","\n","# Forecasting metrics\n","from sktime.performance_metrics.forecasting import mean_absolute_error, mean_squared_error, mean_absolute_percentage_error\n","\n","# Machine learning utilities\n","from sklearn.model_selection import train_test_split\n","from sktime.forecasting.arima import AutoARIMA\n","import statsmodels.api as sm\n","from prophet import Prophet\n","from sklearn.metrics import mean_absolute_error\n","import itertools\n","\n","\n","\n","# Others\n","import zipfile\n","\n","# Suppress warnings\n","warnings.filterwarnings(\"ignore\")\n"],"metadata":{"id":"5us6H_Fyzvk-","executionInfo":{"status":"ok","timestamp":1745735456164,"user_tz":300,"elapsed":23,"user":{"displayName":"Zimeng Huang","userId":"11912824630688390396"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["# ✅ Mount Google Drive\n","drive.mount('/content/drive')\n","\n","# ✅ Define Paths\n","DATA_DIR = \"/content/drive/Shared drives/github/divvy_demand_forecast/data\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uOP89BTN0LCV","executionInfo":{"status":"ok","timestamp":1745734138356,"user_tz":300,"elapsed":656,"user":{"displayName":"Zimeng Huang","userId":"11912824630688390396"}},"outputId":"b0e446f9-6f00-4978-f3ed-208fd87e7b87"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"markdown","source":["# Load Data"],"metadata":{"id":"gT9WHyQW0VHu"}},{"cell_type":"code","source":["data_raw = pd.read_parquet(os.path.join(DATA_DIR, \"divvy_monthly_ridership_city.parquet\"))\n","print(data_raw.shape)\n","data_raw.head(4)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":193},"id":"yUNzPsgS0X80","executionInfo":{"status":"ok","timestamp":1745735744786,"user_tz":300,"elapsed":30,"user":{"displayName":"Zimeng Huang","userId":"11912824630688390396"}},"outputId":"02a183b7-4e48-4fb0-af81-33201ccf6ab2"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["(279, 5)\n"]},{"output_type":"execute_result","data":{"text/plain":["  rideable_type member_casual  year  month  total_rides\n","0  classic_bike        casual  2020     12        11260\n","1  classic_bike        casual  2021      1         8221\n","2  classic_bike        casual  2021      2         5595\n","3  classic_bike        casual  2021      3        45357"],"text/html":["\n","  <div id=\"df-ed0241e9-bca3-4867-97e6-bf384b657fa4\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>rideable_type</th>\n","      <th>member_casual</th>\n","      <th>year</th>\n","      <th>month</th>\n","      <th>total_rides</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>classic_bike</td>\n","      <td>casual</td>\n","      <td>2020</td>\n","      <td>12</td>\n","      <td>11260</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>classic_bike</td>\n","      <td>casual</td>\n","      <td>2021</td>\n","      <td>1</td>\n","      <td>8221</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>classic_bike</td>\n","      <td>casual</td>\n","      <td>2021</td>\n","      <td>2</td>\n","      <td>5595</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>classic_bike</td>\n","      <td>casual</td>\n","      <td>2021</td>\n","      <td>3</td>\n","      <td>45357</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ed0241e9-bca3-4867-97e6-bf384b657fa4')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ed0241e9-bca3-4867-97e6-bf384b657fa4 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ed0241e9-bca3-4867-97e6-bf384b657fa4');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-670c0034-8be2-4c48-83b0-94d63a353d8f\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-670c0034-8be2-4c48-83b0-94d63a353d8f')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-670c0034-8be2-4c48-83b0-94d63a353d8f button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data_raw","summary":"{\n  \"name\": \"data_raw\",\n  \"rows\": 279,\n  \"fields\": [\n    {\n      \"column\": \"rideable_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"docked_bike\",\n          \"electric_scooter\",\n          \"classic_bike\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"member_casual\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"member\",\n          \"casual\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2020,\n          2021\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          10,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_rides\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 67821,\n        \"min\": 1,\n        \"max\": 294593,\n        \"num_unique_values\": 279,\n        \"samples\": [\n          116196,\n          7565\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["data = data_raw[data_raw[\"year\"]<2024]\n","testset = data_raw[data_raw[\"year\"]==2024]\n","rides_by_month = data.groupby([\"year\",\"month\"])[\"total_rides\"].sum().reset_index()\n","rides_by_month.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"fdfXWkuV2D-V","executionInfo":{"status":"ok","timestamp":1745735750254,"user_tz":300,"elapsed":23,"user":{"displayName":"Zimeng Huang","userId":"11912824630688390396"}},"outputId":"941b97d6-cbcc-417c-9527-a0c7d99cdaf0"},"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   year  month  total_rides\n","0  2020      1       143884\n","1  2020      2       139585\n","2  2020      3       143417\n","3  2020      4        84677\n","4  2020      5       199953"],"text/html":["\n","  <div id=\"df-8f771fbb-3167-431a-9f14-52b0190b7db4\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>year</th>\n","      <th>month</th>\n","      <th>total_rides</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2020</td>\n","      <td>1</td>\n","      <td>143884</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2020</td>\n","      <td>2</td>\n","      <td>139585</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2020</td>\n","      <td>3</td>\n","      <td>143417</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2020</td>\n","      <td>4</td>\n","      <td>84677</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2020</td>\n","      <td>5</td>\n","      <td>199953</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8f771fbb-3167-431a-9f14-52b0190b7db4')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8f771fbb-3167-431a-9f14-52b0190b7db4 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8f771fbb-3167-431a-9f14-52b0190b7db4');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-3fb93f97-e24d-45c8-afb7-1ec87eb2f671\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3fb93f97-e24d-45c8-afb7-1ec87eb2f671')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-3fb93f97-e24d-45c8-afb7-1ec87eb2f671 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"rides_by_month","summary":"{\n  \"name\": \"rides_by_month\",\n  \"rows\": 48,\n  \"fields\": [\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2021,\n          2023,\n          2020\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          11,\n          10,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_rides\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 199421,\n        \"min\": 42996,\n        \"max\": 692321,\n        \"num_unique_values\": 48,\n        \"samples\": [\n          272560,\n          463227,\n          215983\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["plt.figure(figsize=(12, 6))\n","plt.plot(rides_by_month['total_rides'])\n","plt.xlabel('Time (Year-Month)')\n","plt.ylabel('Total Rides')\n","plt.title('Total Divvy Rides per Month')\n","plt.xticks(rotation=45)\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":607},"id":"vi5ZPb3e35EN","executionInfo":{"status":"ok","timestamp":1745734483191,"user_tz":300,"elapsed":180,"user":{"displayName":"Zimeng Huang","userId":"11912824630688390396"}},"outputId":"66ae39e5-ec53-4e8b-b192-0764f0d82cf6"},"execution_count":15,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["train = rides_by_month[rides_by_month[\"year\"]<2023]\n","val = rides_by_month[rides_by_month[\"year\"]==2023]"],"metadata":{"id":"JBFE91FC4tT-","executionInfo":{"status":"ok","timestamp":1745734533208,"user_tz":300,"elapsed":10,"user":{"displayName":"Zimeng Huang","userId":"11912824630688390396"}}},"execution_count":16,"outputs":[]},{"cell_type":"markdown","source":["# SARIMA"],"metadata":{"id":"fMkHqlIX191t"}},{"cell_type":"code","source":["import itertools\n","import statsmodels.api as sm\n","\n","# Define parameter ranges (similar to your AutoARIMA grid)\n","p = d = q = range(0, 3)   # (p,d,q) from 0 to 2\n","P = D = Q = range(0, 2)   # (P,D,Q) from 0 to 1\n","s = 12                   # seasonal period (12 months)\n","\n","# Generate all combinations\n","pdq = list(itertools.product(p, d, q))\n","seasonal_pdq = list(itertools.product(P, D, Q, [s]))\n","\n","# To store the best model\n","best_aic = float(\"inf\")\n","best_params = None\n","best_model = None\n","\n","# Grid Search\n","for param in pdq:\n","    for param_seasonal in seasonal_pdq:\n","        try:\n","            mod = sm.tsa.SARIMAX(\n","                train['total_rides'],\n","                order=param,\n","                seasonal_order=param_seasonal,\n","                enforce_stationarity=False,\n","                enforce_invertibility=False\n","            )\n","            results = mod.fit(disp=False)\n","\n","            # Print every model tried\n","            print(f'Tested SARIMAX{param}x{param_seasonal} - AIC:{results.aic}')\n","\n","            if results.aic < best_aic:\n","                best_aic = results.aic\n","                best_params = (param, param_seasonal)\n","                best_model = results\n","\n","        except Exception as e:\n","            print(f'SARIMAX{param}x{param_seasonal} failed. Reason: {e}')\n","            continue\n","\n","# Best model\n","print(f'\\nBest model: SARIMAX{best_params[0]}x{best_params[1]} - AIC:{best_aic}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BFCfzC_b44ql","executionInfo":{"status":"ok","timestamp":1745735519012,"user_tz":300,"elapsed":12447,"user":{"displayName":"Zimeng Huang","userId":"11912824630688390396"}},"outputId":"7e4bfe3e-b3c8-4dea-f438-51d3e77f6c11"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["Tested SARIMAX(0, 0, 0)x(0, 0, 0, 12) - AIC:1005.2611092860292\n","Tested SARIMAX(0, 0, 0)x(0, 0, 1, 12) - AIC:640.0808986433196\n","Tested SARIMAX(0, 0, 0)x(0, 1, 0, 12) - AIC:604.090575782156\n","Tested SARIMAX(0, 0, 0)x(0, 1, 1, 12) - AIC:279.50246910349136\n","Tested SARIMAX(0, 0, 0)x(1, 0, 0, 12) - AIC:627.5543935806236\n","Tested SARIMAX(0, 0, 0)x(1, 0, 1, 12) - AIC:614.5297899430161\n","Tested SARIMAX(0, 0, 0)x(1, 1, 0, 12) - AIC:294.7350787373132\n","Tested SARIMAX(0, 0, 0)x(1, 1, 1, 12) - AIC:280.9683616892358\n","Tested SARIMAX(0, 0, 1)x(0, 0, 0, 12) - AIC:954.0512810254083\n","Tested SARIMAX(0, 0, 1)x(0, 0, 1, 12) - AIC:652.2453525052522\n","Tested SARIMAX(0, 0, 1)x(0, 1, 0, 12) - AIC:561.8104923301946\n","Tested SARIMAX(0, 0, 1)x(0, 1, 1, 12) - AIC:253.88685749690117\n","Tested SARIMAX(0, 0, 1)x(1, 0, 0, 12) - AIC:718.9793307997645\n","Tested SARIMAX(0, 0, 1)x(1, 0, 1, 12) - AIC:653.5489931381227\n","Tested SARIMAX(0, 0, 1)x(1, 1, 0, 12) - AIC:304.0776137349266\n","Tested SARIMAX(0, 0, 1)x(1, 1, 1, 12) - AIC:255.7643775632178\n","Tested SARIMAX(0, 0, 2)x(0, 0, 0, 12) - AIC:920.7111493179615\n","Tested SARIMAX(0, 0, 2)x(0, 0, 1, 12) - AIC:661.9631520062327\n","Tested SARIMAX(0, 0, 2)x(0, 1, 0, 12) - AIC:531.7843869791132\n","Tested SARIMAX(0, 0, 2)x(0, 1, 1, 12) - AIC:226.24262102913622\n","Tested SARIMAX(0, 0, 2)x(1, 0, 0, 12) - AIC:715.3764135265183\n","Tested SARIMAX(0, 0, 2)x(1, 0, 1, 12) - AIC:663.771539985816\n","Tested SARIMAX(0, 0, 2)x(1, 1, 0, 12) - AIC:299.17380821883404\n","Tested SARIMAX(0, 0, 2)x(1, 1, 1, 12) - AIC:228.00315377066008\n","Tested SARIMAX(0, 1, 0)x(0, 0, 0, 12) - AIC:892.8125567561981\n","Tested SARIMAX(0, 1, 0)x(0, 0, 1, 12) - AIC:569.5484142436338\n","Tested SARIMAX(0, 1, 0)x(0, 1, 0, 12) - AIC:559.522162245608\n","Tested SARIMAX(0, 1, 0)x(0, 1, 1, 12) - AIC:249.3575946226228\n","Tested SARIMAX(0, 1, 0)x(1, 0, 0, 12) - AIC:581.1151019547062\n","Tested SARIMAX(0, 1, 0)x(1, 0, 1, 12) - AIC:567.0629365726492\n","Tested SARIMAX(0, 1, 0)x(1, 1, 0, 12) - AIC:270.83524272427564\n","Tested SARIMAX(0, 1, 0)x(1, 1, 1, 12) - AIC:251.04333221205368\n","Tested SARIMAX(0, 1, 1)x(0, 0, 0, 12) - AIC:855.2643880259026\n","Tested SARIMAX(0, 1, 1)x(0, 0, 1, 12) - AIC:538.891302378713\n","Tested SARIMAX(0, 1, 1)x(0, 1, 0, 12) - AIC:528.2042187056412\n","Tested SARIMAX(0, 1, 1)x(0, 1, 1, 12) - AIC:225.44863392040426\n","Tested SARIMAX(0, 1, 1)x(1, 0, 0, 12) - AIC:588.0374948681083\n","Tested SARIMAX(0, 1, 1)x(1, 0, 1, 12) - AIC:537.5110453793925\n","Tested SARIMAX(0, 1, 1)x(1, 1, 0, 12) - AIC:273.3795296404238\n","Tested SARIMAX(0, 1, 1)x(1, 1, 1, 12) - AIC:226.65844675736227\n","Tested SARIMAX(0, 1, 2)x(0, 0, 0, 12) - AIC:828.5045879278202\n","Tested SARIMAX(0, 1, 2)x(0, 0, 1, 12) - AIC:517.6021052725639\n","Tested SARIMAX(0, 1, 2)x(0, 1, 0, 12) - AIC:500.7490526501063\n","Tested SARIMAX(0, 1, 2)x(0, 1, 1, 12) - AIC:199.12117353420433\n","Tested SARIMAX(0, 1, 2)x(1, 0, 0, 12) - AIC:593.6052316835332\n","Tested SARIMAX(0, 1, 2)x(1, 0, 1, 12) - AIC:517.5666639242345\n","Tested SARIMAX(0, 1, 2)x(1, 1, 0, 12) - AIC:273.76019541768954\n","Tested SARIMAX(0, 1, 2)x(1, 1, 1, 12) - AIC:200.12646253948057\n","Tested SARIMAX(0, 2, 0)x(0, 0, 0, 12) - AIC:851.813150779093\n","Tested SARIMAX(0, 2, 0)x(0, 0, 1, 12) - AIC:536.1349970201662\n","Tested SARIMAX(0, 2, 0)x(0, 1, 0, 12) - AIC:540.6442682072957\n","Tested SARIMAX(0, 2, 0)x(0, 1, 1, 12) - AIC:230.29427102810507\n","Tested SARIMAX(0, 2, 0)x(1, 0, 0, 12) - AIC:563.8585132997167\n","Tested SARIMAX(0, 2, 0)x(1, 0, 1, 12) - AIC:536.9006352693169\n","Tested SARIMAX(0, 2, 0)x(1, 1, 0, 12) - AIC:252.4044144769588\n","Tested SARIMAX(0, 2, 0)x(1, 1, 1, 12) - AIC:232.29261386536257\n","Tested SARIMAX(0, 2, 1)x(0, 0, 0, 12) - AIC:828.5269491711082\n","Tested SARIMAX(0, 2, 1)x(0, 0, 1, 12) - AIC:512.4021676304299\n","Tested SARIMAX(0, 2, 1)x(0, 1, 0, 12) - AIC:503.07712231054893\n","Tested SARIMAX(0, 2, 1)x(0, 1, 1, 12) - AIC:204.0685658626428\n","Tested SARIMAX(0, 2, 1)x(1, 0, 0, 12) - AIC:565.7605722005823\n","Tested SARIMAX(0, 2, 1)x(1, 0, 1, 12) - AIC:509.48951940853533\n","Tested SARIMAX(0, 2, 1)x(1, 1, 0, 12) - AIC:253.21454356106614\n","Tested SARIMAX(0, 2, 1)x(1, 1, 1, 12) - AIC:205.97172411515518\n","Tested SARIMAX(0, 2, 2)x(0, 0, 0, 12) - AIC:799.354217417628\n","Tested SARIMAX(0, 2, 2)x(0, 0, 1, 12) - AIC:487.2118616110539\n","Tested SARIMAX(0, 2, 2)x(0, 1, 0, 12) - AIC:473.6635339492399\n","Tested SARIMAX(0, 2, 2)x(0, 1, 1, 12) - AIC:177.07190138777267\n","Tested SARIMAX(0, 2, 2)x(1, 0, 0, 12) - AIC:560.7345603978586\n","Tested SARIMAX(0, 2, 2)x(1, 0, 1, 12) - AIC:488.504254312684\n","Tested SARIMAX(0, 2, 2)x(1, 1, 0, 12) - AIC:252.0314622573205\n","Tested SARIMAX(0, 2, 2)x(1, 1, 1, 12) - AIC:180.07455658196804\n","Tested SARIMAX(1, 0, 0)x(0, 0, 0, 12) - AIC:919.2047317469741\n","Tested SARIMAX(1, 0, 0)x(0, 0, 1, 12) - AIC:596.5378173964978\n","Tested SARIMAX(1, 0, 0)x(0, 1, 0, 12) - AIC:580.4125086124074\n","Tested SARIMAX(1, 0, 0)x(0, 1, 1, 12) - AIC:274.3364006137901\n","Tested SARIMAX(1, 0, 0)x(1, 0, 0, 12) - AIC:591.909054319935\n","Tested SARIMAX(1, 0, 0)x(1, 0, 1, 12) - AIC:593.8787084935641\n","Tested SARIMAX(1, 0, 0)x(1, 1, 0, 12) - AIC:274.4918487044868\n","Tested SARIMAX(1, 0, 0)x(1, 1, 1, 12) - AIC:275.9623337967171\n","Tested SARIMAX(1, 0, 1)x(0, 0, 0, 12) - AIC:881.2502158757899\n","Tested SARIMAX(1, 0, 1)x(0, 0, 1, 12) - AIC:568.5949477004181\n","Tested SARIMAX(1, 0, 1)x(0, 1, 0, 12) - AIC:556.9093488753077\n","Tested SARIMAX(1, 0, 1)x(0, 1, 1, 12) - AIC:248.57884777543\n","Tested SARIMAX(1, 0, 1)x(1, 0, 0, 12) - AIC:589.2784070377247\n","Tested SARIMAX(1, 0, 1)x(1, 0, 1, 12) - AIC:566.3615059250449\n","Tested SARIMAX(1, 0, 1)x(1, 1, 0, 12) - AIC:273.8813618911912\n","Tested SARIMAX(1, 0, 1)x(1, 1, 1, 12) - AIC:250.19852658653383\n","Tested SARIMAX(1, 0, 2)x(0, 0, 0, 12) - AIC:851.0535731211644\n","Tested SARIMAX(1, 0, 2)x(0, 0, 1, 12) - AIC:540.7699585351033\n","Tested SARIMAX(1, 0, 2)x(0, 1, 0, 12) - AIC:533.9359427807797\n","Tested SARIMAX(1, 0, 2)x(0, 1, 1, 12) - AIC:223.56454076396426\n","Tested SARIMAX(1, 0, 2)x(1, 0, 0, 12) - AIC:589.7028601458568\n","Tested SARIMAX(1, 0, 2)x(1, 0, 1, 12) - AIC:540.4122658568626\n","Tested SARIMAX(1, 0, 2)x(1, 1, 0, 12) - AIC:273.6006330356545\n","Tested SARIMAX(1, 0, 2)x(1, 1, 1, 12) - AIC:222.45375647197307\n","Tested SARIMAX(1, 1, 0)x(0, 0, 0, 12) - AIC:873.1319305011593\n","Tested SARIMAX(1, 1, 0)x(0, 0, 1, 12) - AIC:563.2918392862215\n","Tested SARIMAX(1, 1, 0)x(0, 1, 0, 12) - AIC:558.1402184600267\n","Tested SARIMAX(1, 1, 0)x(0, 1, 1, 12) - AIC:251.7117487307877\n","Tested SARIMAX(1, 1, 0)x(1, 0, 0, 12) - AIC:559.942868934802\n","Tested SARIMAX(1, 1, 0)x(1, 0, 1, 12) - AIC:561.8936140257538\n","Tested SARIMAX(1, 1, 0)x(1, 1, 0, 12) - AIC:251.7773603542073\n","Tested SARIMAX(1, 1, 0)x(1, 1, 1, 12) - AIC:253.19535729555795\n","Tested SARIMAX(1, 1, 1)x(0, 0, 0, 12) - AIC:850.1434158212426\n","Tested SARIMAX(1, 1, 1)x(0, 0, 1, 12) - AIC:535.7805053628623\n","Tested SARIMAX(1, 1, 1)x(0, 1, 0, 12) - AIC:529.7856642062328\n","Tested SARIMAX(1, 1, 1)x(0, 1, 1, 12) - AIC:227.2838718086697\n","Tested SARIMAX(1, 1, 1)x(1, 0, 0, 12) - AIC:559.530032302016\n","Tested SARIMAX(1, 1, 1)x(1, 0, 1, 12) - AIC:534.9754347369116\n","Tested SARIMAX(1, 1, 1)x(1, 1, 0, 12) - AIC:251.35480000132645\n","Tested SARIMAX(1, 1, 1)x(1, 1, 1, 12) - AIC:228.6126020119247\n","Tested SARIMAX(1, 1, 2)x(0, 0, 0, 12) - AIC:825.8540925302086\n","Tested SARIMAX(1, 1, 2)x(0, 0, 1, 12) - AIC:509.4773104285662\n","Tested SARIMAX(1, 1, 2)x(0, 1, 0, 12) - AIC:502.00756175596763\n","Tested SARIMAX(1, 1, 2)x(0, 1, 1, 12) - AIC:200.858359637486\n","Tested SARIMAX(1, 1, 2)x(1, 0, 0, 12) - AIC:556.2684545811682\n","Tested SARIMAX(1, 1, 2)x(1, 0, 1, 12) - AIC:507.50446451943276\n","Tested SARIMAX(1, 1, 2)x(1, 1, 0, 12) - AIC:251.1657512342923\n","Tested SARIMAX(1, 1, 2)x(1, 1, 1, 12) - AIC:202.19155812885344\n","Tested SARIMAX(1, 2, 0)x(0, 0, 0, 12) - AIC:853.6764889588237\n","Tested SARIMAX(1, 2, 0)x(0, 0, 1, 12) - AIC:537.3843356469438\n","Tested SARIMAX(1, 2, 0)x(0, 1, 0, 12) - AIC:538.6906309082029\n","Tested SARIMAX(1, 2, 0)x(0, 1, 1, 12) - AIC:230.98123792892864\n","Tested SARIMAX(1, 2, 0)x(1, 0, 0, 12) - AIC:536.182260648038\n","Tested SARIMAX(1, 2, 0)x(1, 0, 1, 12) - AIC:538.147360061437\n","Tested SARIMAX(1, 2, 0)x(1, 1, 0, 12) - AIC:231.38651669363367\n","Tested SARIMAX(1, 2, 0)x(1, 1, 1, 12) - AIC:232.79852610046072\n","Tested SARIMAX(1, 2, 1)x(0, 0, 0, 12) - AIC:824.6121012815703\n","Tested SARIMAX(1, 2, 1)x(0, 0, 1, 12) - AIC:514.2519469839298\n","Tested SARIMAX(1, 2, 1)x(0, 1, 0, 12) - AIC:504.9949392868533\n","Tested SARIMAX(1, 2, 1)x(0, 1, 1, 12) - AIC:204.88880700636696\n","Tested SARIMAX(1, 2, 1)x(1, 0, 0, 12) - AIC:535.7611158872662\n","Tested SARIMAX(1, 2, 1)x(1, 0, 1, 12) - AIC:511.3378899488167\n","Tested SARIMAX(1, 2, 1)x(1, 1, 0, 12) - AIC:230.71243959223207\n","Tested SARIMAX(1, 2, 1)x(1, 1, 1, 12) - AIC:206.80723845970743\n","Tested SARIMAX(1, 2, 2)x(0, 0, 0, 12) - AIC:801.8193624081761\n","Tested SARIMAX(1, 2, 2)x(0, 0, 1, 12) - AIC:486.30549827567216\n","Tested SARIMAX(1, 2, 2)x(0, 1, 0, 12) - AIC:474.22706286302747\n","Tested SARIMAX(1, 2, 2)x(0, 1, 1, 12) - AIC:178.5529763985584\n","Tested SARIMAX(1, 2, 2)x(1, 0, 0, 12) - AIC:532.150926348363\n","Tested SARIMAX(1, 2, 2)x(1, 0, 1, 12) - AIC:486.2749482356056\n","Tested SARIMAX(1, 2, 2)x(1, 1, 0, 12) - AIC:232.32802015781976\n","Tested SARIMAX(1, 2, 2)x(1, 1, 1, 12) - AIC:180.51144554529338\n","Tested SARIMAX(2, 0, 0)x(0, 0, 0, 12) - AIC:870.7165454210505\n","Tested SARIMAX(2, 0, 0)x(0, 0, 1, 12) - AIC:587.5156449488024\n","Tested SARIMAX(2, 0, 0)x(0, 1, 0, 12) - AIC:556.2438722235886\n","Tested SARIMAX(2, 0, 0)x(0, 1, 1, 12) - AIC:275.965609262962\n","Tested SARIMAX(2, 0, 0)x(1, 0, 0, 12) - AIC:559.6178299898684\n","Tested SARIMAX(2, 0, 0)x(1, 0, 1, 12) - AIC:561.6040303262772\n","Tested SARIMAX(2, 0, 0)x(1, 1, 0, 12) - AIC:251.40034131906546\n","Tested SARIMAX(2, 0, 0)x(1, 1, 1, 12) - AIC:252.86834981030418\n","Tested SARIMAX(2, 0, 1)x(0, 0, 0, 12) - AIC:872.7229204865216\n","Tested SARIMAX(2, 0, 1)x(0, 0, 1, 12) - AIC:565.1556859991288\n","Tested SARIMAX(2, 0, 1)x(0, 1, 0, 12) - AIC:558.9572933754987\n","Tested SARIMAX(2, 0, 1)x(0, 1, 1, 12) - AIC:250.43224847990413\n","Tested SARIMAX(2, 0, 1)x(1, 0, 0, 12) - AIC:561.4558336505098\n","Tested SARIMAX(2, 0, 1)x(1, 0, 1, 12) - AIC:563.442828797897\n","Tested SARIMAX(2, 0, 1)x(1, 1, 0, 12) - AIC:250.6964695571852\n","Tested SARIMAX(2, 0, 1)x(1, 1, 1, 12) - AIC:252.09550406365375\n","Tested SARIMAX(2, 0, 2)x(0, 0, 0, 12) - AIC:844.3305071559419\n","Tested SARIMAX(2, 0, 2)x(0, 0, 1, 12) - AIC:533.6815988028033\n","Tested SARIMAX(2, 0, 2)x(0, 1, 0, 12) - AIC:528.8537319171008\n","Tested SARIMAX(2, 0, 2)x(0, 1, 1, 12) - AIC:225.84951404358358\n","Tested SARIMAX(2, 0, 2)x(1, 0, 0, 12) - AIC:555.4672344766453\n","Tested SARIMAX(2, 0, 2)x(1, 0, 1, 12) - AIC:535.0475773194145\n","Tested SARIMAX(2, 0, 2)x(1, 1, 0, 12) - AIC:249.30667999964678\n","Tested SARIMAX(2, 0, 2)x(1, 1, 1, 12) - AIC:228.28879471217934\n","Tested SARIMAX(2, 1, 0)x(0, 0, 0, 12) - AIC:849.4926245806262\n","Tested SARIMAX(2, 1, 0)x(0, 0, 1, 12) - AIC:565.2685204996296\n","Tested SARIMAX(2, 1, 0)x(0, 1, 0, 12) - AIC:529.4074934846958\n","Tested SARIMAX(2, 1, 0)x(0, 1, 1, 12) - AIC:251.75504148947041\n","Tested SARIMAX(2, 1, 0)x(1, 0, 0, 12) - AIC:533.418800123194\n","Tested SARIMAX(2, 1, 0)x(1, 0, 1, 12) - AIC:535.3283396871168\n","Tested SARIMAX(2, 1, 0)x(1, 1, 0, 12) - AIC:227.09270190829926\n","Tested SARIMAX(2, 1, 0)x(1, 1, 1, 12) - AIC:227.91032949869017\n","Tested SARIMAX(2, 1, 1)x(0, 0, 0, 12) - AIC:831.9820871647019\n","Tested SARIMAX(2, 1, 1)x(0, 0, 1, 12) - AIC:530.6971255923855\n","Tested SARIMAX(2, 1, 1)x(0, 1, 0, 12) - AIC:527.3700999617125\n","Tested SARIMAX(2, 1, 1)x(0, 1, 1, 12) - AIC:228.23324961315404\n","Tested SARIMAX(2, 1, 1)x(1, 0, 0, 12) - AIC:530.5188740450037\n","Tested SARIMAX(2, 1, 1)x(1, 0, 1, 12) - AIC:532.1806461359218\n","Tested SARIMAX(2, 1, 1)x(1, 1, 0, 12) - AIC:228.15131912458233\n","Tested SARIMAX(2, 1, 1)x(1, 1, 1, 12) - AIC:228.5417050796412\n","Tested SARIMAX(2, 1, 2)x(0, 0, 0, 12) - AIC:796.013541293966\n","Tested SARIMAX(2, 1, 2)x(0, 0, 1, 12) - AIC:497.4097157876684\n","Tested SARIMAX(2, 1, 2)x(0, 1, 0, 12) - AIC:499.9226301031529\n","Tested SARIMAX(2, 1, 2)x(0, 1, 1, 12) - AIC:201.2378588903404\n","Tested SARIMAX(2, 1, 2)x(1, 0, 0, 12) - AIC:519.5796219918427\n","Tested SARIMAX(2, 1, 2)x(1, 0, 1, 12) - AIC:498.9083361034185\n","Tested SARIMAX(2, 1, 2)x(1, 1, 0, 12) - AIC:226.78150856619223\n","Tested SARIMAX(2, 1, 2)x(1, 1, 1, 12) - AIC:203.7211248180237\n","Tested SARIMAX(2, 2, 0)x(0, 0, 0, 12) - AIC:829.2844038936381\n","Tested SARIMAX(2, 2, 0)x(0, 0, 1, 12) - AIC:539.1860351844542\n","Tested SARIMAX(2, 2, 0)x(0, 1, 0, 12) - AIC:512.833541130778\n","Tested SARIMAX(2, 2, 0)x(0, 1, 1, 12) - AIC:229.81582862742616\n","Tested SARIMAX(2, 2, 0)x(1, 0, 0, 12) - AIC:512.5155938025104\n","Tested SARIMAX(2, 2, 0)x(1, 0, 1, 12) - AIC:514.5155926520158\n","Tested SARIMAX(2, 2, 0)x(1, 1, 0, 12) - AIC:205.4521210713765\n","Tested SARIMAX(2, 2, 0)x(1, 1, 1, 12) - AIC:207.2277486880359\n","Tested SARIMAX(2, 2, 1)x(0, 0, 0, 12) - AIC:831.185636969408\n","Tested SARIMAX(2, 2, 1)x(0, 0, 1, 12) - AIC:514.635122730501\n","Tested SARIMAX(2, 2, 1)x(0, 1, 0, 12) - AIC:506.6140806096466\n","Tested SARIMAX(2, 2, 1)x(0, 1, 1, 12) - AIC:206.18984060717327\n","Tested SARIMAX(2, 2, 1)x(1, 0, 0, 12) - AIC:512.5774895282818\n","Tested SARIMAX(2, 2, 1)x(1, 0, 1, 12) - AIC:514.5499542778748\n","Tested SARIMAX(2, 2, 1)x(1, 1, 0, 12) - AIC:207.02261103951014\n","Tested SARIMAX(2, 2, 1)x(1, 1, 1, 12) - AIC:207.92575831974972\n","Tested SARIMAX(2, 2, 2)x(0, 0, 0, 12) - AIC:788.6355560348511\n","Tested SARIMAX(2, 2, 2)x(0, 0, 1, 12) - AIC:487.9125421407784\n","Tested SARIMAX(2, 2, 2)x(0, 1, 0, 12) - AIC:480.30439308861634\n","Tested SARIMAX(2, 2, 2)x(0, 1, 1, 12) - AIC:180.670943882874\n","Tested SARIMAX(2, 2, 2)x(1, 0, 0, 12) - AIC:508.46757737213414\n","Tested SARIMAX(2, 2, 2)x(1, 0, 1, 12) - AIC:482.6548748337222\n","Tested SARIMAX(2, 2, 2)x(1, 1, 0, 12) - AIC:203.24928441288176\n","Tested SARIMAX(2, 2, 2)x(1, 1, 1, 12) - AIC:182.35279710758988\n","\n","Best model: SARIMAX(0, 2, 2)x(0, 1, 1, 12) - AIC:177.07190138777267\n"]}]},{"cell_type":"code","source":["# Forecast\n","y_pred = best_model.forecast(steps=len(val))\n","\n","# plot forecast\n","plt.figure(figsize=(12, 6))\n","\n","# Plot train\n","plt.plot(rides_by_month.index, rides_by_month['total_rides'], label='Real')\n","\n","# Plot forecast\n","forecast_index = val.index  # assume you are forecasting for the validation period\n","plt.plot(forecast_index, y_pred, label='Forecast')\n","\n","plt.legend()\n","plt.xlabel('Date')\n","plt.ylabel('Total Rides')\n","plt.title('Divvy Ridership Forecast')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"cMdwZNR88qVd","executionInfo":{"status":"ok","timestamp":1745735901268,"user_tz":300,"elapsed":156,"user":{"displayName":"Zimeng Huang","userId":"11912824630688390396"}},"outputId":"dc91bba9-604b-4d1e-ef41-2802a8415be1"},"execution_count":47,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"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xSktX74c06ZNw549e5CcnCx1OERERA6DMxOIiIhc1IULF7BmzRo88MADUodCRERELoYzE4iIiFxMRkYGtm/fjo8//hgqlQqPPPKI1CERERGRi2FlAhERkYvZsmULHnjgAWRkZGDFihUIDw+XOiQiIiJyMZyZQERERERERERtwsoEIiIiIiIiImoTJhOIiIiIiIiIqE04gNGBGY1G5OXlwdfXFzKZTOpwiIiIiIiIyMUJgoCqqipERkZCLr9y/QGTCQ4sLy8P0dHRUodBREREREREbub8+fOIioq64u1MJjgwX19fAKa/RK1WK3E0RERERERE5OoqKysRHR1teT56JUwmODCxtUGr1TKZQERERERERHbTUqs9BzASERERERERUZswmUBEREREREREbcJkAhERERERERG1CWcmEBERERERUYcZDAY0NjZKHQa1QKFQQKlUtjgToSVMJhAREREREVGHVFdXIycnB4IgSB0KtYKXlxciIiKgVqvbfQ4mE4iIiIiIiKjdDAYDcnJy4OXlhZCQkA6/4k22IwgCdDodioqKkJGRgW7dukEub9/0AyYTiIiIiIiIqN0aGxshCAJCQkLg6ekpdTjUAk9PT6hUKmRlZUGn08HDw6Nd5+EARiIiIiIiIuowViQ4j/ZWIzQ7hxXiICIiIiIiIiI3wmQCEREREREREbWJ0yQTYmNjIZPJLnmbOXMmAKC+vh4zZ85EUFAQfHx8MHHiRBQUFDQ7R3Z2NiZMmAAvLy+Ehobi6aefhl6vb3bM5s2bMXDgQGg0GsTHx2P58uWXxLJ48WLExsbCw8MDQ4YMwe7du5vd3ppYiIiIiIiIyPVNnToVt912m9RhWJ3TJBP27NmDCxcuWN42bNgAALjrrrsAAHPmzMHPP/+MVatWYcuWLcjLy8Mdd9xh+XqDwYAJEyZAp9Nhx44dWLFiBZYvX4758+dbjsnIyMCECRMwevRoHDx4ELNnz8aMGTOwfv16yzErV67E3Llz8eKLL2L//v3o168fUlNTUVhYaDmmpViIiIiIiIhIelOnTrW8UK1SqRAXF4dnnnkG9fX1Uofm8GSCky4CnT17NlavXo0zZ86gsrISISEh+Oqrr3DnnXcCAE6ePImePXsiLS0N11xzDdauXYubbroJeXl5CAsLAwAsXboUzz77LIqKiqBWq/Hss89izZo1OHr0qOU6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n090dDTTp09nw4YNPW5vb29n3rx5pKamEh8fz3XXXUd1dXWfYxEREREREREJRkGTTOjs7OSGG27g7rvvPuPtNpuNOXPm0NnZydq1a3nuued49tlnWbRokeeYQ4cOMWfOHC699FJKS0tZsGAB3/72t1m6dKnnmJdffpmFCxfy4IMPsnnzZgoLC5k9ezY1NTWeY+69917efPNNXnnlFVatWkVFRQVf+cpX+hSLiIiIiIiISLAyORwOh9FB9MWzzz7LggULqK+v7/H9d999l7lz51JRUUFmZiYATz/9ND/84Q85fvw4VquVH/7wh7z99tts377d83M33XQT9fX1LFmyBIDp06czdepUnnjiCQDsdju5ubl897vf5Uc/+hENDQ2kp6fz4osvcv311wOwe/duxowZw7p16zj//PN7FUtvNDY2kpSURENDA4mJif367yYiIiIiIiJyNr19Hxo0lQlns27dOiZMmOB58w4we/ZsGhsb2bFjh+eY4uLiHj83e/Zs1q1bBzirH0pKSnocYzabKS4u9hxTUlJCV1dXj2NGjx5NXl6e55jexHImHR0dNDY29vgSERERERERCTQhk0yoqqrq8eYd8Py5qqrqC49pbGykra2N2tpabDbbGY85/T6sVutn5jZ8+pizxXImixcvJikpyfOVm5vbm7+6iIiIiIiIiF8Zmkz40Y9+hMlk+sKv3bt3GxmiX91///00NDR4vsrLy40OSUREREREROQzIow8+fe//31uvfXWLzxm6NChvbqvrKysz2xdcG9YyMrK8lx+eutCdXU1iYmJxMTEYLFYsFgsZzzm9Pvo7Oykvr6+R3XCp485WyxnEhUVRVRUVK/+viIiIiIiIiJGMbQyIT09ndGjR3/hV2+HFRYVFbFt27YeWxeWLVtGYmIiY8eO9RyzfPnyHj+3bNkyioqKALBarUyePLnHMXa7neXLl3uOmTx5MpGRkT2O2bNnD2VlZZ5jehOLiIiIiIiISLAytDKhL8rKyqirq6OsrAybzUZpaSkAw4cPJz4+niuuuIKxY8fyzW9+k4cffpiqqioeeOAB5s2b5/m0/6677uKJJ57gvvvu41vf+hYrVqzgH//4B2+//bbnPAsXLuSWW25hypQpTJs2jccee4yWlhZuu+02AJKSkrj99ttZuHAhKSkpJCYm8t3vfpeioiLOP/98gF7FIiIiIiIiIhKsgmY15K233spzzz33me9/8MEHXHLJJQAcOXKEu+++m5UrVxIXF8ctt9zCQw89RETEqZzJypUruffee9m5cyeDBg3iJz/5yWdaLZ544gl++9vfUlVVxcSJE3n88ceZPn265/b29na+//3v8/e//52Ojg5mz57NU0891aOFoTexnE1DQwPJycmUl5drNaSIiIiIiIj4XGNjI7m5udTX15OUlPS5xwVNMiEcHT16VBsdRERERERExO/Ky8sZNGjQ596uZEIAs9vtVFRUkJCQgMlkMjqcz+XOXKmCQkKBHs8SSvR4llChx7KEEj2eJdA5HA6amprIycnBbP78MYtBMzMhHJnN5i/MBAWaxMRE/YMoIUOPZwklejxLqNBjWUKJHs8SyL6ovcHN0G0OIiIiIiIiIhJ8lEwQERERERERkT5RMkH6LSoqigcffFBrLyUk6PEsoUSPZwkVeixLKNHjWUKFBjCKiIiIiIiISJ+oMkFERERERERE+kTJBBERERERERHpEyUTRERERERERKRPlEwQERERERERkT5RMkH65cknnyQ/P5/o6GimT5/Ohg0bjA5J5Kw+/PBDrr76anJycjCZTLz++us9bnc4HCxatIjs7GxiYmIoLi5m3759xgQrchaLFy9m6tSpJCQkkJGRwbXXXsuePXt6HNPe3s68efNITU0lPj6e6667jurqaoMiFvl8f/zjHykoKCAxMZHExESKiop49913PbfrsSzB6qGHHsJkMrFgwQLP9/R4lmCnZIKcs5dffpmFCxfy4IMPsnnzZgoLC5k9ezY1NTVGhybyhVpaWigsLOTJJ5884+0PP/wwjz/+OE8//TTr168nLi6O2bNn097e7udIRc5u1apVzJs3j48//phly5bR1dXFFVdcQUtLi+eYe++9lzfffJNXXnmFVatWUVFRwVe+8hUDoxY5s0GDBvHQQw9RUlLCpk2buOyyy7jmmmvYsWMHoMeyBKeNGzfypz/9iYKCgh7f1+NZgp5D5BxNmzbNMW/ePM+fbTabIycnx7F48WIDoxLpG8Dx2muvef5st9sdWVlZjt/+9ree79XX1zuioqIcf//73w2IUKRvampqHIBj1apVDofD+fiNjIx0vPLKK55jdu3a5QAc69atMypMkV4bMGCA4y9/+YseyxKUmpqaHCNGjHAsW7bMMXPmTMc999zjcDj0b7OEBlUmyDnp7OykpKSE4uJiz/fMZjPFxcWsW7fOwMhE+ufQoUNUVVX1eGwnJSUxffp0PbYlKDQ0NACQkpICQElJCV1dXT0e06NHjyYvL0+PaQloNpuNl156iZaWFoqKivRYlqA0b9485syZ0+NxC/q3WUJDhNEBSHCqra3FZrORmZnZ4/uZmZns3r3boKhE+q+qqgrgjI9t920igcput7NgwQIuuOACxo8fDzgf01arleTk5B7H6jEtgWrbtm0UFRXR3t5OfHw8r732GmPHjqW0tFSPZQkqL730Eps3b2bjxo2fuU3/NksoUDJBREQkRMybN4/t27fz0UcfGR2KyDkbNWoUpaWlNDQ08M9//pNbbrmFVatWGR2WSJ+Ul5dzzz33sGzZMqKjo40OR8Qn1OYg5yQtLQ2LxfKZibPV1dVkZWUZFJVI/7kfv3psS7CZP38+b731Fh988AGDBg3yfD8rK4vOzk7q6+t7HK/HtAQqq9XK8OHDmTx5MosXL6awsJDf//73eixLUCkpKaGmpoZJkyYRERFBREQEq1at4vHHHyciIoLMzEw9niXoKZkg58RqtTJ58mSWL1/u+Z7dbmf58uUUFRUZGJlI/wwZMoSsrKwej+3GxkbWr1+vx7YEJIfDwfz583nttddYsWIFQ4YM6XH75MmTiYyM7PGY3rNnD2VlZXpMS1Cw2+10dHTosSxBZdasWWzbto3S0lLP15QpU/j617/uua7HswQ7tTnIOVu4cCG33HILU6ZMYdq0aTz22GO0tLRw2223GR2ayBdqbm5m//79nj8fOnSI0tJSUlJSyMvLY8GCBfzyl79kxIgRDBkyhJ/85Cfk5ORw7bXXGhe0yOeYN28eL774Im+88QYJCQmeXtukpCRiYmJISkri9ttvZ+HChaSkpJCYmMh3v/tdioqKOP/88w2OXqSn+++/n6uuuoq8vDyampp48cUXWblyJUuXLtVjWYJKQkKCZ3aNW1xcHKmpqZ7v6/EswU7JBDlnN954I8ePH2fRokVUVVUxceJElixZ8pnBdSKBZtOmTVx66aWePy9cuBCAW265hWeffZb77ruPlpYW7rzzTurr67nwwgtZsmSJeh4lIP3xj38E4JJLLunx/WeeeYZbb70VgN/97neYzWauu+46Ojo6mD17Nk899ZSfIxU5u5qaGm6++WYqKytJSkqioKCApUuXcvnllwN6LEto0eNZgp3J4XA4jA5CRERERERERIKHZiaIiIiIiIiISJ8omSAiIiIiIiIifaJkgoiIiIiIiIj0iZIJIiIiIiIiItInSiaIiIiIiIiISJ8omSAiIiIiIiIifaJkgoiIiIiIiIj0iZIJIiIiIiIiItInSiaIiIiIiIiISJ8omSAiIiIB6dZbb8VkMmEymYiMjCQzM5PLL7+cv/71r9jt9l7fz7PPPktycrLvAhUREQlDSiaIiIhIwLryyiuprKzk8OHDvPvuu1x66aXcc889zJ07l+7ubqPDExERCVtKJoiIiEjAioqKIisri4EDBzJp0iR+/OMf88Ybb/Duu+/y7LPPAvDoo48yYcIE4uLiyM3N5T//8z9pbm4GYOXKldx22200NDR4qhx++tOfAtDR0cF//dd/MXDgQOLi4pg+fTorV6405i8qIiISZJRMEBERkaBy2WWXUVhYyKuvvgqA2Wzm8ccfZ8eOHTz33HOsWLGC++67D4AZM2bw2GOPkZiYSGVlJZWVlfzXf/0XAPPnz2fdunW89NJLbN26lRtuuIErr7ySffv2GfZ3ExERCRYmh8PhMDoIERERkU+79dZbqa+v5/XXX//MbTfddBNbt25l586dn7ntn//8J3fddRe1tbWAc2bCggULqK+v9xxTVlbG0KFDKSsrIycnx/P94uJipk2bxq9//Wuv/31ERERCSYTRAYiIiIj0lcPhwGQyAfD++++zePFidu/eTWNjI93d3bS3t9Pa2kpsbOwZf37btm3YbDZGjhzZ4/sdHR2kpqb6PH4REZFgp2SCiIiIBJ1du3YxZMgQDh8+zNy5c7n77rv51a9+RUpKCh999BG33347nZ2dn5tMaG5uxmKxUFJSgsVi6XFbfHy8P/4KIiIiQU3JBBEREQkqK1asYNu2bdx7772UlJRgt9t55JFHMJudo6D+8Y9/9DjearVis9l6fO+8887DZrNRU1PDRRdd5LfYRUREQoWSCSIiIhKwOjo6qKqqwmazUV1dzZIlS1i8eDFz587l5ptvZvv27XR1dfGHP/yBq6++mjVr1vD000/3uI/8/Hyam5tZvnw5hYWFxMbGMnLkSL7+9a9z880388gjj3Deeedx/Phxli9fTkFBAXPmzDHobywiIhIctM1BREREAtaSJUvIzs4mPz+fK6+8kg8++IDHH3+cN954A4vFQmFhIY8++ii/+c1vGD9+PC+88AKLFy/ucR8zZszgrrvu4sYbbyQ9PZ2HH34YgGeeeYabb76Z73//+4waNYprr72WjRs3kpeXZ8RfVUREJKhom4OIiIiIiIiI9IkqE0RERERERESkT5RMEBEREREREZE+UTJBRERERERERPpEyQQRERERERER6RMlE0RERERERESkT5RMEBEREREREZE+UTJBRERERERERPpEyQQRERERERER6RMlE0RERERERESkT5RMEBEREREREZE+UTJBRERERERERPrk/wcK6uTK89XDiQAAAABJRU5ErkJggg==\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# Prophet"],"metadata":{"id":"DZP8vcE4-TH-"}},{"cell_type":"code","source":["# Prepare train data\n","train_prophet = train.reset_index().rename(columns={'date': 'ds', 'total_rides': 'y'})\n","val_prophet = val.reset_index().rename(columns={'date': 'ds', 'total_rides': 'y'})\n","param_grid = {\n","    'changepoint_prior_scale': [0.001, 0.01, 0.1, 0.5],\n","    'seasonality_prior_scale': [0.01, 0.1, 1.0, 10.0],\n","    'seasonality_mode': ['additive', 'multiplicative']\n","}\n","\n","# Generate all combinations\n","all_params = [dict(zip(param_grid.keys(), v)) for v in itertools.product(*param_grid.values())]\n","\n","best_mae = float(\"inf\")\n","best_params = None\n","best_model = None\n","\n","# Search\n","for params in all_params:\n","    model = Prophet(\n","        changepoint_prior_scale=params['changepoint_prior_scale'],\n","        seasonality_prior_scale=params['seasonality_prior_scale'],\n","        seasonality_mode=params['seasonality_mode']\n","    )\n","    model.fit(train_prophet)\n","\n","    future = model.make_future_dataframe(periods=len(val_prophet), freq='M')\n","    forecast = model.predict(future)\n","\n","    # Match predicted yhat to validation y\n","    y_pred = forecast.set_index('ds').loc[val_prophet['ds']]['yhat'].values\n","\n","    mae = mean_absolute_error(val_prophet['y'], y_pred)\n","\n","    print(f\"Tested params {params} - MAE: {mae:.2f}\")\n","\n","    if mae < best_mae:\n","        best_mae = mae\n","        best_params = params\n","        best_model = model\n","\n","# Best result\n","print(f\"\\nBest Params: {best_params} - Best MAE: {best_mae:.2f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":372},"id":"nBUioCRX-VPb","executionInfo":{"status":"error","timestamp":1745736093912,"user_tz":300,"elapsed":41,"user":{"displayName":"Zimeng Huang","userId":"11912824630688390396"}},"outputId":"b69febce-cc65-4e53-c9d7-c4ff3011966d"},"execution_count":49,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"Dataframe must have columns \"ds\" and \"y\" with the dates and values respectively.","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-49-4305d2becd48>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     22\u001b[0m         \u001b[0mseasonality_mode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'seasonality_mode'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m     )\n\u001b[0;32m---> 24\u001b[0;31m     \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_prophet\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     25\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m     \u001b[0mfuture\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmake_future_dataframe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mperiods\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mval_prophet\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfreq\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'M'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/prophet/forecaster.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, df, **kwargs)\u001b[0m\n\u001b[1;32m   1215\u001b[0m                             'Instantiate a new object.')\n\u001b[1;32m   1216\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1217\u001b[0;31m         \u001b[0mmodel_inputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpreprocess\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1218\u001b[0m         \u001b[0minitial_params\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcalculate_initial_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel_inputs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mK\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1219\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/prophet/forecaster.py\u001b[0m in \u001b[0;36mpreprocess\u001b[0;34m(self, df, **kwargs)\u001b[0m\n\u001b[1;32m   1124\u001b[0m         \"\"\"\n\u001b[1;32m   1125\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'ds'\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'y'\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1126\u001b[0;31m             raise ValueError(\n\u001b[0m\u001b[1;32m   1127\u001b[0m                 \u001b[0;34m'Dataframe must have columns \"ds\" and \"y\" with the dates and '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1128\u001b[0m                 \u001b[0;34m'values respectively.'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Dataframe must have columns \"ds\" and \"y\" with the dates and values respectively."]}]}]}