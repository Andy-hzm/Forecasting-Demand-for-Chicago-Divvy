{"cells":[{"cell_type":"code","source":["import os\n","import requests\n","import zipfile\n","import pandas as pd\n","from io import BytesIO\n","from concurrent.futures import ThreadPoolExecutor\n","\n","# âœ… Mount Google Drive\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","# âœ… Define the path to your Shared Drive\n","SHARED_DRIVE_NAME = \"Time Series\"  # Your Shared Drive name\n","DATA_DIR = f\"/content/drive/Shared drives/{SHARED_DRIVE_NAME}/divvy_data/qa\"\n","\n","# Ensure the directory exists\n","os.makedirs(DATA_DIR, exist_ok=True)\n","\n","BASE_URL = \"https://divvy-tripdata.s3.amazonaws.com/\"\n","YEARS = range(2020, 2025)  # Process data from 2020 to 2025\n","\n","# âœ… Define Parquet file path for incremental appends\n","parquet_path = os.path.join(DATA_DIR, \"qa_divvy_data.parquet\")\n","\n","# âœ… Function to download and extract data\n","def download_and_extract(year, month=None):\n","    \"\"\"Downloads and extracts Divvy data for a given year and month (or quarter for 2020 Q1).\"\"\"\n","\n","    # Special case for Q1 2020\n","    if year == 2020 and month is None:\n","        filename = \"Divvy_Trips_2020_Q1.zip\"\n","    else:\n","        filename = f\"{year}{month:02d}-divvy-tripdata.zip\"\n","\n","    file_url = f\"{BASE_URL}{filename}\"\n","\n","    try:\n","        response = requests.get(file_url, stream=True, timeout=10)\n","        response.raise_for_status()\n","\n","        with zipfile.ZipFile(BytesIO(response.content)) as z:\n","            # Get CSV filename inside ZIP\n","            csv_filename = z.namelist()[0]\n","            with z.open(csv_filename) as csvfile:\n","                # âœ… Read CSV with explicit dtype for IDs to avoid conversion errors\n","                df = pd.read_csv(\n","                    csvfile,\n","                    usecols=[\n","                        \"ride_id\", \"started_at\", \"rideable_type\", \"start_station_name\",\n","                        \"end_station_name\", \"start_station_id\", \"end_station_id\", \"start_lat\",\n","                        \"start_lng\", \"end_lat\", \"end_lng\", \"member_casual\"\n","                    ],\n","                    dtype={\"start_station_id\": str, \"end_station_id\": str}  # Ensure station IDs are strings\n","                )\n","\n","                # âœ… Ensure missing station IDs are handled\n","                df = df.assign(\n","                    start_station_id=df[\"start_station_id\"].fillna(\"\"),\n","                    end_station_id=df[\"end_station_id\"].fillna(\"\")\n","                )\n","\n","                # âœ… Assign 'Outside of Dock' to missing stations for electric bikes\n","                df.loc[(df[\"rideable_type\"] == \"electric_bike\") & (df[\"start_station_name\"].isna()), \"start_station_name\"] = \"Outside of Dock\"\n","                df.loc[(df[\"rideable_type\"] == \"electric_bike\") & (df[\"end_station_name\"].isna()), \"end_station_name\"] = \"Outside of Dock\"\n","\n","                df[\"date\"] = pd.to_datetime(df[\"started_at\"], errors=\"coerce\").dt.date\n","                return df\n","\n","    except Exception as e:\n","        print(f\"Error processing {filename}: {e}\")\n","        return None\n","\n","# âœ… Process data **one year at a time** to prevent RAM overload\n","for year in YEARS:\n","    print(f\"ðŸ”¹ Processing year: {year}\")\n","\n","    all_data = []\n","    with ThreadPoolExecutor(max_workers=10) as executor:\n","        futures = []\n","\n","        # Special case for Q1 2020\n","        if year == 2020:\n","            futures.append(executor.submit(download_and_extract, 2020, None))\n","\n","        # Process monthly data for Apr 2020 - Dec 2023\n","        for month in range(1, 13):\n","            if year == 2020 and month <= 3:\n","                continue  # Skip Jan-Mar 2020 (already handled)\n","            futures.append(executor.submit(download_and_extract, year, month))\n","\n","        for future in futures:\n","            result = future.result()\n","            if result is not None:\n","                all_data.append(result)\n","\n","    # âœ… Aggregate and append data **only if we have results**\n","    if all_data:\n","        df_year = pd.concat(all_data, ignore_index=True)\n","\n","        # âœ… Ensure 'date' is correctly formatted\n","        df_year[\"date\"] = pd.to_datetime(df_year[\"date\"])\n","\n","        # âœ… Aggregate distinct ride counts\n","        grouped_df = df_year.groupby([\n","            \"rideable_type\", \"date\", \"start_station_name\",\n","            \"end_station_name\", \"start_station_id\", \"end_station_id\",\n","            \"start_lat\", \"start_lng\", \"end_lat\", \"end_lng\", \"member_casual\"\n","        ])[\"ride_id\"].nunique().reset_index()\n","\n","        grouped_df.rename(columns={\"ride_id\": \"rides\"}, inplace=True)\n","\n","        # âœ… Append to Parquet in chunks (year by year)\n","        if os.path.exists(parquet_path):\n","            grouped_df.to_parquet(parquet_path, engine=\"fastparquet\", index=False, compression=\"snappy\", append=True)\n","        else:\n","            grouped_df.to_parquet(parquet_path, engine=\"fastparquet\", index=False, compression=\"snappy\")\n","\n","        print(f\"âœ… {year} data aggregated & appended to {parquet_path}. Rows added: {grouped_df.shape[0]}\")\n","\n","print(\"ðŸŽ‰ Processing complete! Final aggregated dataset stored in:\")\n","print(f\"   - Parquet: {parquet_path}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ld5P2SouB-Nm","executionInfo":{"status":"ok","timestamp":1739301739341,"user_tz":360,"elapsed":306809,"user":{"displayName":"Andrew Castillo","userId":"17495214857217982164"}},"outputId":"82fd25ed-e62f-46a5-aeaf-5196317f395a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","ðŸ”¹ Processing year: 2020\n","âœ… 2020 data aggregated & appended to /content/drive/Shared drives/Time Series/divvy_data/qa/qa_divvy_data.parquet. Rows added: 2732943\n","ðŸ”¹ Processing year: 2021\n","âœ… 2021 data aggregated & appended to /content/drive/Shared drives/Time Series/divvy_data/qa/qa_divvy_data.parquet. Rows added: 4531568\n","ðŸ”¹ Processing year: 2022\n","âœ… 2022 data aggregated & appended to /content/drive/Shared drives/Time Series/divvy_data/qa/qa_divvy_data.parquet. Rows added: 4861901\n","ðŸ”¹ Processing year: 2023\n","âœ… 2023 data aggregated & appended to /content/drive/Shared drives/Time Series/divvy_data/qa/qa_divvy_data.parquet. Rows added: 4913384\n","ðŸ”¹ Processing year: 2024\n","âœ… 2024 data aggregated & appended to /content/drive/Shared drives/Time Series/divvy_data/qa/qa_divvy_data.parquet. Rows added: 4806296\n","ðŸŽ‰ Processing complete! Final aggregated dataset stored in:\n","   - Parquet: /content/drive/Shared drives/Time Series/divvy_data/qa/qa_divvy_data.parquet\n"]}]},{"cell_type":"code","source":["grouped_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":617},"id":"36ceMGsdcTpR","executionInfo":{"status":"ok","timestamp":1739302260336,"user_tz":360,"elapsed":47,"user":{"displayName":"Andrew Castillo","userId":"17495214857217982164"}},"outputId":"d4187025-087b-4d47-f1dc-844b00e75695"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            rideable_type       date          start_station_name  \\\n","0            classic_bike 2024-01-01           900 W Harrison St   \n","1            classic_bike 2024-01-01           900 W Harrison St   \n","2            classic_bike 2024-01-01  Aberdeen St & Jackson Blvd   \n","3            classic_bike 2024-01-01  Aberdeen St & Jackson Blvd   \n","4            classic_bike 2024-01-01  Aberdeen St & Jackson Blvd   \n","...                   ...        ...                         ...   \n","4806291  electric_scooter 2024-09-30        Wood St & Hubbard St   \n","4806292  electric_scooter 2024-09-30     Wood St & Milwaukee Ave   \n","4806293  electric_scooter 2024-09-30     Wood St & Milwaukee Ave   \n","4806294  electric_scooter 2024-09-30  Wood St & Taylor St (Temp)   \n","4806295  electric_scooter 2024-09-30      Woodlawn Ave & 55th St   \n","\n","                     end_station_name start_station_id end_station_id  \\\n","0          Aberdeen St & Jackson Blvd            13028          13157   \n","1            Loomis St & Lexington St            13028          13332   \n","2                   900 W Harrison St            13157          13028   \n","3             Aberdeen St & Monroe St            13157          13156   \n","4        Desplaines St & Jackson Blvd            13157          15539   \n","...                               ...              ...            ...   \n","4806291      Kingsbury St & Kinzie St            13432   KA1503000043   \n","4806292     Ashland Ave & Division St            13221          13061   \n","4806293     Leavitt St & Armitage Ave            13221   TA1309000029   \n","4806294   Spaulding Ave & Division St            13285          15654   \n","4806295      Dorchester Ave & 49th St     TA1307000164   KA1503000069   \n","\n","         start_lat  start_lng    end_lat    end_lng member_casual  rides  \n","0        41.874754 -87.649807  41.877726 -87.654787        member      1  \n","1        41.874754 -87.649807  41.872229 -87.661364        member      1  \n","2        41.877726 -87.654787  41.874754 -87.649807        member      1  \n","3        41.877726 -87.654787  41.880419 -87.655519        member      1  \n","4        41.877726 -87.654787  41.878119 -87.643948        casual      1  \n","...            ...        ...        ...        ...           ...    ...  \n","4806291  41.889899 -87.671473  41.889177 -87.638506        member      1  \n","4806292  41.907655 -87.672552  41.903450 -87.667747        member      1  \n","4806293  41.907655 -87.672552  41.917805 -87.682437        member      1  \n","4806294  41.869265 -87.673731  41.902707 -87.709220        member      1  \n","4806295  41.795264 -87.596471  41.805772 -87.592464        member      1  \n","\n","[4806296 rows x 12 columns]"],"text/html":["\n","  <div id=\"df-43914163-cba6-4dd2-8f86-c3ad185db65a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>rideable_type</th>\n","      <th>date</th>\n","      <th>start_station_name</th>\n","      <th>end_station_name</th>\n","      <th>start_station_id</th>\n","      <th>end_station_id</th>\n","      <th>start_lat</th>\n","      <th>start_lng</th>\n","      <th>end_lat</th>\n","      <th>end_lng</th>\n","      <th>member_casual</th>\n","      <th>rides</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>classic_bike</td>\n","      <td>2024-01-01</td>\n","      <td>900 W Harrison St</td>\n","      <td>Aberdeen St &amp; Jackson Blvd</td>\n","      <td>13028</td>\n","      <td>13157</td>\n","      <td>41.874754</td>\n","      <td>-87.649807</td>\n","      <td>41.877726</td>\n","      <td>-87.654787</td>\n","      <td>member</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>classic_bike</td>\n","      <td>2024-01-01</td>\n","      <td>900 W Harrison St</td>\n","      <td>Loomis St &amp; Lexington St</td>\n","      <td>13028</td>\n","      <td>13332</td>\n","      <td>41.874754</td>\n","      <td>-87.649807</td>\n","      <td>41.872229</td>\n","      <td>-87.661364</td>\n","      <td>member</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>classic_bike</td>\n","      <td>2024-01-01</td>\n","      <td>Aberdeen St &amp; Jackson Blvd</td>\n","      <td>900 W Harrison St</td>\n","      <td>13157</td>\n","      <td>13028</td>\n","      <td>41.877726</td>\n","      <td>-87.654787</td>\n","      <td>41.874754</td>\n","      <td>-87.649807</td>\n","      <td>member</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>classic_bike</td>\n","      <td>2024-01-01</td>\n","      <td>Aberdeen St &amp; Jackson Blvd</td>\n","      <td>Aberdeen St &amp; Monroe St</td>\n","      <td>13157</td>\n","      <td>13156</td>\n","      <td>41.877726</td>\n","      <td>-87.654787</td>\n","      <td>41.880419</td>\n","      <td>-87.655519</td>\n","      <td>member</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>classic_bike</td>\n","      <td>2024-01-01</td>\n","      <td>Aberdeen St &amp; Jackson Blvd</td>\n","      <td>Desplaines St &amp; Jackson Blvd</td>\n","      <td>13157</td>\n","      <td>15539</td>\n","      <td>41.877726</td>\n","      <td>-87.654787</td>\n","      <td>41.878119</td>\n","      <td>-87.643948</td>\n","      <td>casual</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>4806291</th>\n","      <td>electric_scooter</td>\n","      <td>2024-09-30</td>\n","      <td>Wood St &amp; Hubbard St</td>\n","      <td>Kingsbury St &amp; Kinzie St</td>\n","      <td>13432</td>\n","      <td>KA1503000043</td>\n","      <td>41.889899</td>\n","      <td>-87.671473</td>\n","      <td>41.889177</td>\n","      <td>-87.638506</td>\n","      <td>member</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4806292</th>\n","      <td>electric_scooter</td>\n","      <td>2024-09-30</td>\n","      <td>Wood St &amp; Milwaukee Ave</td>\n","      <td>Ashland Ave &amp; Division St</td>\n","      <td>13221</td>\n","      <td>13061</td>\n","      <td>41.907655</td>\n","      <td>-87.672552</td>\n","      <td>41.903450</td>\n","      <td>-87.667747</td>\n","      <td>member</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4806293</th>\n","      <td>electric_scooter</td>\n","      <td>2024-09-30</td>\n","      <td>Wood St &amp; Milwaukee Ave</td>\n","      <td>Leavitt St &amp; Armitage Ave</td>\n","      <td>13221</td>\n","      <td>TA1309000029</td>\n","      <td>41.907655</td>\n","      <td>-87.672552</td>\n","      <td>41.917805</td>\n","      <td>-87.682437</td>\n","      <td>member</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4806294</th>\n","      <td>electric_scooter</td>\n","      <td>2024-09-30</td>\n","      <td>Wood St &amp; Taylor St (Temp)</td>\n","      <td>Spaulding Ave &amp; Division St</td>\n","      <td>13285</td>\n","      <td>15654</td>\n","      <td>41.869265</td>\n","      <td>-87.673731</td>\n","      <td>41.902707</td>\n","      <td>-87.709220</td>\n","      <td>member</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4806295</th>\n","      <td>electric_scooter</td>\n","      <td>2024-09-30</td>\n","      <td>Woodlawn Ave &amp; 55th St</td>\n","      <td>Dorchester Ave &amp; 49th St</td>\n","      <td>TA1307000164</td>\n","      <td>KA1503000069</td>\n","      <td>41.795264</td>\n","      <td>-87.596471</td>\n","      <td>41.805772</td>\n","      <td>-87.592464</td>\n","      <td>member</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>4806296 rows Ã— 12 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-43914163-cba6-4dd2-8f86-c3ad185db65a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-43914163-cba6-4dd2-8f86-c3ad185db65a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-43914163-cba6-4dd2-8f86-c3ad185db65a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d1d92e95-235a-477c-9f59-f349fc869525\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d1d92e95-235a-477c-9f59-f349fc869525')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d1d92e95-235a-477c-9f59-f349fc869525 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_efadda04-92f4-4387-8a28-2e4555101812\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('grouped_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_efadda04-92f4-4387-8a28-2e4555101812 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('grouped_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"grouped_df"}},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":[],"metadata":{"id":"7a_dSyp8foRb"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM72j211D9nOiYBw9DH78dv"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}